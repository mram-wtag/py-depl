image:
  # image config
  repository: itswcg/django-helm-application
  tag: latest
  pullPolicy: Always
  imagePullSecrets: []

configmap:
  # django environment
  data:
    DJANGO_SETTINGS_MODULE: config.settings.production
    DATABASE_URL: postgresql://admin:secret@database:5432/core
    # REDIS_URL:
    # CELERY_BROKER_URL:

pvc:
  created: false
  storageClassName:

serviceAccount:
  # Specifies whether a service account should be created
  created: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

djangoServer:
  replicaCount: 1

  command: ["gunicorn", "--workers", "1", "--bind", ":8000",
            "--log-level", "INFO", "config.wsgi"]

  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  service:
    type: ClusterIP
    port: 8000

  hpa:
    enabled: false

  ingress:
    enabled: false
    annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

celeryBeat:
  enabled: false

  command: ["celery", "beat", "-A", "config.celery_app", "-l", "info"]

  podSecurityContext: {}

  securityContext: {}

  resources: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}

celeryWorker:
  enabled: false

  queue:
    # This is a list that supports multiple queues
    - name: celery
      replicaCount: 1
      command: ["celery", "worker", "-A", "config.celery_app", "-l", "info", "-Q", "celery"]
      podSecurityContext: {}
      securityContext: {}
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}

celerFlower:
  enabled: false

  command: ["celery", "flower", "-A", "config.celery_app", "--address=0.0.0.0", "--port=5555"]

  service:
    type: ClusterIP
    port: 5555

  ingress:
    enabled: false
    annotations: {}
    hosts:
      - host: chart-example.local
        paths: []
    tls: []

  podSecurityContext: {}

  securityContext: {}

  resources: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}

grpcServer:
  enabled: false
  replicaCount: 1

  command: ["python", "manage.py", "grpcrunserver", "8001"]

  podSecurityContext: {}

  securityContext: {}

  service:
    type: ClusterIP
    port: 8001

  hpa:
    enabled: false

  ingress:
    enabled: false
    annotations: {}
    hosts:
      - host: chart-example.local
        paths: []
    tls: []

  resources: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}

collectstaticJob:
  enabled: false

migrateJob:
  enabled: false
